"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/interweave";
exports.ids = ["vendor-chunks/interweave"];
exports.modules = {

/***/ "(ssr)/./node_modules/interweave/esm/bundle-7aab7250.js":
/*!********************************************************!*\
  !*** ./node_modules/interweave/esm/bundle-7aab7250.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ ALLOWED_TAG_LIST),\n/* harmony export */   B: () => (/* binding */ BANNED_TAG_LIST),\n/* harmony export */   E: () => (/* binding */ Element),\n/* harmony export */   F: () => (/* binding */ Filter),\n/* harmony export */   M: () => (/* binding */ Matcher),\n/* harmony export */   T: () => (/* binding */ TAGS),\n/* harmony export */   _: () => (/* binding */ _extends),\n/* harmony export */   a: () => (/* binding */ ATTRIBUTES),\n/* harmony export */   b: () => (/* binding */ FILTER_DENY),\n/* harmony export */   c: () => (/* binding */ ATTRIBUTES_TO_PROPS),\n/* harmony export */   d: () => (/* binding */ FILTER_CAST_BOOL),\n/* harmony export */   e: () => (/* binding */ FILTER_CAST_NUMBER),\n/* harmony export */   f: () => (/* binding */ FILTER_NO_CAST),\n/* harmony export */   g: () => (/* binding */ TYPE_FLOW),\n/* harmony export */   h: () => (/* binding */ TYPE_SECTION),\n/* harmony export */   i: () => (/* binding */ TYPE_HEADING),\n/* harmony export */   j: () => (/* binding */ TYPE_PHRASING),\n/* harmony export */   k: () => (/* binding */ TYPE_EMBEDDED),\n/* harmony export */   l: () => (/* binding */ TYPE_INTERACTIVE),\n/* harmony export */   m: () => (/* binding */ TYPE_PALPABLE),\n/* harmony export */   n: () => (/* binding */ FILTER_ALLOW),\n/* harmony export */   o: () => (/* binding */ match)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Bundled with Packemon: https://packemon.dev\n// Platform: browser, Support: stable, Format: esm\n\n/* eslint-disable no-bitwise, no-magic-numbers, sort-keys */\n// https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories\n\nconst TYPE_FLOW = 1;\nconst TYPE_SECTION = 1 << 1;\nconst TYPE_HEADING = 1 << 2;\nconst TYPE_PHRASING = 1 << 3;\nconst TYPE_EMBEDDED = 1 << 4;\nconst TYPE_INTERACTIVE = 1 << 5;\nconst TYPE_PALPABLE = 1 << 6; // https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n\nconst tagConfigs = {\n  a: {\n    content: TYPE_FLOW | TYPE_PHRASING,\n    self: false,\n    type: TYPE_FLOW | TYPE_PHRASING | TYPE_INTERACTIVE | TYPE_PALPABLE\n  },\n  address: {\n    invalid: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'address', 'article', 'aside', 'section', 'div', 'header', 'footer'],\n    self: false\n  },\n  audio: {\n    children: ['track', 'source']\n  },\n  br: {\n    type: TYPE_FLOW | TYPE_PHRASING,\n    void: true\n  },\n  body: {\n    content: TYPE_FLOW | TYPE_SECTION | TYPE_HEADING | TYPE_PHRASING | TYPE_EMBEDDED | TYPE_INTERACTIVE | TYPE_PALPABLE\n  },\n  button: {\n    content: TYPE_PHRASING,\n    type: TYPE_FLOW | TYPE_PHRASING | TYPE_INTERACTIVE | TYPE_PALPABLE\n  },\n  caption: {\n    content: TYPE_FLOW,\n    parent: ['table']\n  },\n  col: {\n    parent: ['colgroup'],\n    void: true\n  },\n  colgroup: {\n    children: ['col'],\n    parent: ['table']\n  },\n  details: {\n    children: ['summary'],\n    type: TYPE_FLOW | TYPE_INTERACTIVE | TYPE_PALPABLE\n  },\n  dd: {\n    content: TYPE_FLOW,\n    parent: ['dl']\n  },\n  dl: {\n    children: ['dt', 'dd'],\n    type: TYPE_FLOW\n  },\n  dt: {\n    content: TYPE_FLOW,\n    invalid: ['footer', 'header'],\n    parent: ['dl']\n  },\n  figcaption: {\n    content: TYPE_FLOW,\n    parent: ['figure']\n  },\n  footer: {\n    invalid: ['footer', 'header']\n  },\n  header: {\n    invalid: ['footer', 'header']\n  },\n  hr: {\n    type: TYPE_FLOW,\n    void: true\n  },\n  img: {\n    void: true\n  },\n  li: {\n    content: TYPE_FLOW,\n    parent: ['ul', 'ol', 'menu']\n  },\n  main: {\n    self: false\n  },\n  ol: {\n    children: ['li'],\n    type: TYPE_FLOW\n  },\n  picture: {\n    children: ['source', 'img'],\n    type: TYPE_FLOW | TYPE_PHRASING | TYPE_EMBEDDED\n  },\n  rb: {\n    parent: ['ruby', 'rtc']\n  },\n  rp: {\n    parent: ['ruby', 'rtc']\n  },\n  rt: {\n    content: TYPE_PHRASING,\n    parent: ['ruby', 'rtc']\n  },\n  rtc: {\n    content: TYPE_PHRASING,\n    parent: ['ruby']\n  },\n  ruby: {\n    children: ['rb', 'rp', 'rt', 'rtc']\n  },\n  source: {\n    parent: ['audio', 'video', 'picture'],\n    void: true\n  },\n  summary: {\n    content: TYPE_PHRASING,\n    parent: ['details']\n  },\n  table: {\n    children: ['caption', 'colgroup', 'thead', 'tbody', 'tfoot', 'tr'],\n    type: TYPE_FLOW\n  },\n  tbody: {\n    parent: ['table'],\n    children: ['tr']\n  },\n  td: {\n    content: TYPE_FLOW,\n    parent: ['tr']\n  },\n  tfoot: {\n    parent: ['table'],\n    children: ['tr']\n  },\n  th: {\n    content: TYPE_FLOW,\n    parent: ['tr']\n  },\n  thead: {\n    parent: ['table'],\n    children: ['tr']\n  },\n  tr: {\n    parent: ['table', 'tbody', 'thead', 'tfoot'],\n    children: ['th', 'td']\n  },\n  track: {\n    parent: ['audio', 'video'],\n    void: true\n  },\n  ul: {\n    children: ['li'],\n    type: TYPE_FLOW\n  },\n  video: {\n    children: ['track', 'source']\n  },\n  wbr: {\n    type: TYPE_FLOW | TYPE_PHRASING,\n    void: true\n  }\n};\n\nfunction createConfigBuilder(config) {\n  return tagName => {\n    tagConfigs[tagName] = { ...config,\n      ...tagConfigs[tagName]\n    };\n  };\n}\n\n['address', 'main', 'div', 'figure', 'p', 'pre'].forEach(createConfigBuilder({\n  content: TYPE_FLOW,\n  type: TYPE_FLOW | TYPE_PALPABLE\n}));\n['abbr', 'b', 'bdi', 'bdo', 'cite', 'code', 'data', 'dfn', 'em', 'i', 'kbd', 'mark', 'q', 'ruby', 'samp', 'strong', 'sub', 'sup', 'time', 'u', 'var'].forEach(createConfigBuilder({\n  content: TYPE_PHRASING,\n  type: TYPE_FLOW | TYPE_PHRASING | TYPE_PALPABLE\n}));\n['p', 'pre'].forEach(createConfigBuilder({\n  content: TYPE_PHRASING,\n  type: TYPE_FLOW | TYPE_PALPABLE\n}));\n['s', 'small', 'span', 'del', 'ins'].forEach(createConfigBuilder({\n  content: TYPE_PHRASING,\n  type: TYPE_FLOW | TYPE_PHRASING\n}));\n['article', 'aside', 'footer', 'header', 'nav', 'section', 'blockquote'].forEach(createConfigBuilder({\n  content: TYPE_FLOW,\n  type: TYPE_FLOW | TYPE_SECTION | TYPE_PALPABLE\n}));\n['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(createConfigBuilder({\n  content: TYPE_PHRASING,\n  type: TYPE_FLOW | TYPE_HEADING | TYPE_PALPABLE\n}));\n['audio', 'canvas', 'iframe', 'img', 'video'].forEach(createConfigBuilder({\n  type: TYPE_FLOW | TYPE_PHRASING | TYPE_EMBEDDED | TYPE_PALPABLE\n})); // Disable this map from being modified\n\nconst TAGS = Object.freeze(tagConfigs); // Tags that should never be allowed, even if the allow list is disabled\n\nconst BANNED_TAG_LIST = ['applet', 'base', 'body', 'command', 'embed', 'frame', 'frameset', 'head', 'html', 'link', 'meta', 'noscript', 'object', 'script', 'style', 'title'];\nconst ALLOWED_TAG_LIST = Object.keys(TAGS).filter(tag => tag !== 'canvas' && tag !== 'iframe'); // Filters apply to HTML attributes\n\nconst FILTER_ALLOW = 1;\nconst FILTER_DENY = 2;\nconst FILTER_CAST_NUMBER = 3;\nconst FILTER_CAST_BOOL = 4;\nconst FILTER_NO_CAST = 5; // Attributes not listed here will be denied\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\n\nconst ATTRIBUTES = Object.freeze({\n  alt: FILTER_ALLOW,\n  cite: FILTER_ALLOW,\n  class: FILTER_ALLOW,\n  colspan: FILTER_CAST_NUMBER,\n  controls: FILTER_CAST_BOOL,\n  datetime: FILTER_ALLOW,\n  default: FILTER_CAST_BOOL,\n  disabled: FILTER_CAST_BOOL,\n  dir: FILTER_ALLOW,\n  height: FILTER_ALLOW,\n  href: FILTER_ALLOW,\n  id: FILTER_ALLOW,\n  kind: FILTER_ALLOW,\n  label: FILTER_ALLOW,\n  lang: FILTER_ALLOW,\n  loading: FILTER_ALLOW,\n  loop: FILTER_CAST_BOOL,\n  media: FILTER_ALLOW,\n  muted: FILTER_CAST_BOOL,\n  poster: FILTER_ALLOW,\n  rel: FILTER_ALLOW,\n  role: FILTER_ALLOW,\n  rowspan: FILTER_CAST_NUMBER,\n  scope: FILTER_ALLOW,\n  sizes: FILTER_ALLOW,\n  span: FILTER_CAST_NUMBER,\n  start: FILTER_CAST_NUMBER,\n  style: FILTER_NO_CAST,\n  src: FILTER_ALLOW,\n  srclang: FILTER_ALLOW,\n  srcset: FILTER_ALLOW,\n  tabindex: FILTER_ALLOW,\n  target: FILTER_ALLOW,\n  title: FILTER_ALLOW,\n  type: FILTER_ALLOW,\n  width: FILTER_ALLOW\n}); // Attributes to camel case for React props\n\nconst ATTRIBUTES_TO_PROPS = Object.freeze({\n  class: 'className',\n  colspan: 'colSpan',\n  datetime: 'dateTime',\n  rowspan: 'rowSpan',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex'\n});\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction Element({\n  attributes = {},\n  className,\n  children = null,\n  selfClose = false,\n  tagName\n}) {\n  const Tag = tagName;\n  return selfClose ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Tag, _extends({\n    className: className\n  }, attributes)) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Tag, _extends({\n    className: className\n  }, attributes), children);\n}\n\nclass Filter {\n  /**\n   * Filter and clean an HTML attribute value.\n   */\n  attribute(name, value) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return value;\n  }\n  /**\n   * Filter and clean an HTML node.\n   */\n\n\n  node(name, node) {\n    return node;\n  }\n\n}\n/**\n * Trigger the actual pattern match and package the matched\n * response through a callback.\n */\n\n\nfunction match(string, pattern, process, isVoid = false) {\n  const matches = string.match(pattern instanceof RegExp ? pattern : new RegExp(pattern, 'i'));\n\n  if (!matches) {\n    return null;\n  }\n\n  return {\n    match: matches[0],\n    void: isVoid,\n    ...process(matches),\n    index: matches.index,\n    length: matches[0].length,\n    valid: true\n  };\n}\n\nclass Matcher {\n  constructor(name, options, factory) {\n    _defineProperty(this, \"greedy\", false);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"propName\", void 0);\n\n    _defineProperty(this, \"inverseName\", void 0);\n\n    _defineProperty(this, \"factory\", void 0);\n\n    if ( true && (!name || name.toLowerCase() === 'html')) {\n      throw new Error(`The matcher name \"${name}\" is not allowed.`);\n    } // @ts-expect-error Allow override\n\n\n    this.options = { ...options\n    };\n    this.propName = name;\n    this.inverseName = `no${name.charAt(0).toUpperCase() + name.slice(1)}`;\n    this.factory = factory !== null && factory !== void 0 ? factory : null;\n  }\n  /**\n   * Attempts to create a React element using a custom user provided factory,\n   * or the default matcher factory.\n   */\n\n\n  createElement(children, props) {\n    const element = this.factory ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(this.factory, props, children) : this.replaceWith(children, props);\n\n    if ( true && typeof element !== 'string' && ! /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(element)) {\n      throw new Error(`Invalid React element created from ${this.constructor.name}.`);\n    }\n\n    return element;\n  }\n  /**\n   * Trigger the actual pattern match and package the matched\n   * response through a callback.\n   */\n\n\n  doMatch(string, pattern, callback, isVoid = false) {\n    return match(string, pattern, callback, isVoid);\n  }\n  /**\n   * Callback triggered before parsing.\n   */\n\n\n  onBeforeParse(content, props) {\n    return content;\n  }\n  /**\n   * Callback triggered after parsing.\n   */\n\n\n  onAfterParse(content, props) {\n    return content;\n  }\n  /**\n   * Replace the match with a React element based on the matched token and optional props.\n   */\n\n\n}\n\n\n//# sourceMappingURL=bundle-7aab7250.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/interweave/esm/bundle-7aab7250.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/interweave/esm/index.js":
/*!**********************************************!*\
  !*** ./node_modules/interweave/esm/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALLOWED_TAG_LIST: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   ATTRIBUTES: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   ATTRIBUTES_TO_PROPS: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   BANNED_TAG_LIST: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.B),\n/* harmony export */   Element: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   FILTER_ALLOW: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   FILTER_CAST_BOOL: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   FILTER_CAST_NUMBER: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   FILTER_DENY: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   FILTER_NO_CAST: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   Filter: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   Interweave: () => (/* binding */ Interweave),\n/* harmony export */   Markup: () => (/* binding */ Markup),\n/* harmony export */   Matcher: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.M),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   TAGS: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.T),\n/* harmony export */   TYPE_EMBEDDED: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   TYPE_FLOW: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   TYPE_HEADING: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.i),\n/* harmony export */   TYPE_INTERACTIVE: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   TYPE_PALPABLE: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   TYPE_PHRASING: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   TYPE_SECTION: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   match: () => (/* reexport safe */ _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.o)\n/* harmony export */ });\n/* harmony import */ var _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bundle-7aab7250.js */ \"(ssr)/./node_modules/interweave/esm/bundle-7aab7250.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var escape_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! escape-html */ \"(ssr)/./node_modules/escape-html/index.js\");\n/* harmony import */ var escape_html__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(escape_html__WEBPACK_IMPORTED_MODULE_2__);\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Bundled with Packemon: https://packemon.dev\n// Platform: browser, Support: stable, Format: esm\n\n\n\n\nconst INVALID_STYLES = /(url|image|image-set)\\(/i;\n\nclass StyleFilter extends _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.F {\n  attribute(name, value) {\n    if (name === 'style') {\n      Object.keys(value).forEach(key => {\n        if (String(value[key]).match(INVALID_STYLES)) {\n          // eslint-disable-next-line no-param-reassign\n          delete value[key];\n        }\n      });\n    } // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\n\n    return value;\n  }\n\n}\n/* eslint-disable no-bitwise, no-cond-assign, complexity, @typescript-eslint/no-unsafe-return */\n\n\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst INVALID_ROOTS = /^<(!doctype|(html|head|body)(\\s|>))/i;\nconst ALLOWED_ATTRS = /^(aria-|data-|\\w+:)/iu;\nconst OPEN_TOKEN = /{{{(\\w+)\\/?}}}/;\n\nfunction createDocument() {\n  // Maybe SSR? Just do nothing instead of crashing!\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return undefined;\n  }\n\n  return document.implementation.createHTMLDocument('Interweave');\n}\n\nclass Parser {\n  constructor(markup, props = {}, matchers = [], filters = []) {\n    var _props$allowList;\n\n    _defineProperty(this, \"allowed\", void 0);\n\n    _defineProperty(this, \"banned\", void 0);\n\n    _defineProperty(this, \"blocked\", void 0);\n\n    _defineProperty(this, \"container\", void 0);\n\n    _defineProperty(this, \"content\", []);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"matchers\", void 0);\n\n    _defineProperty(this, \"filters\", void 0);\n\n    _defineProperty(this, \"keyIndex\", void 0);\n\n    if ( true && markup && typeof markup !== 'string') {\n      throw new TypeError('Interweave parser requires a valid string.');\n    }\n\n    this.props = props;\n    this.matchers = matchers;\n    this.filters = [...filters, new StyleFilter()];\n    this.keyIndex = -1;\n    this.container = this.createContainer(markup || '');\n    this.allowed = new Set((_props$allowList = props.allowList) !== null && _props$allowList !== void 0 ? _props$allowList : _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.A);\n    this.banned = new Set(_bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.B);\n    this.blocked = new Set(props.blockList);\n  }\n  /**\n   * Loop through and apply all registered attribute filters.\n   */\n\n\n  applyAttributeFilters(name, value) {\n    return this.filters.reduce((nextValue, filter) => nextValue !== null && typeof filter.attribute === 'function' ? filter.attribute(name, nextValue) : nextValue, value);\n  }\n  /**\n   * Loop through and apply all registered node filters.\n   */\n\n\n  applyNodeFilters(name, node) {\n    // Allow null to be returned\n    return this.filters.reduce((nextNode, filter) => nextNode !== null && typeof filter.node === 'function' ? filter.node(name, nextNode) : nextNode, node);\n  }\n  /**\n   * Loop through and apply all registered matchers to the string.\n   * If a match is found, create a React element, and build a new array.\n   * This array allows React to interpolate and render accordingly.\n   */\n\n\n  applyMatchers(string, parentConfig) {\n    const elements = {};\n    const {\n      props\n    } = this;\n    let matchedString = string;\n    let elementIndex = 0;\n    let parts = null;\n    this.matchers.forEach(matcher => {\n      const tagName = matcher.asTag().toLowerCase();\n      const config = this.getTagConfig(tagName); // Skip matchers that have been disabled from props or are not supported\n\n      if (props[matcher.inverseName] || !this.isTagAllowed(tagName)) {\n        return;\n      } // Skip matchers in which the child cannot be rendered\n\n\n      if (!this.canRenderChild(parentConfig, config)) {\n        return;\n      } // Continuously trigger the matcher until no matches are found\n\n\n      let tokenizedString = '';\n\n      while (matchedString && (parts = matcher.match(matchedString))) {\n        const {\n          index,\n          length,\n          match,\n          valid,\n          void: isVoid,\n          ...partProps\n        } = parts;\n        const tokenName = matcher.propName + String(elementIndex); // Piece together a new string with interpolated tokens\n\n        if (index > 0) {\n          tokenizedString += matchedString.slice(0, index);\n        }\n\n        if (valid) {\n          tokenizedString += isVoid ? `{{{${tokenName}/}}}` : `{{{${tokenName}}}}${match}{{{/${tokenName}}}}`;\n          this.keyIndex += 1;\n          elementIndex += 1;\n          elements[tokenName] = {\n            children: match,\n            matcher,\n            props: { ...props,\n              ...partProps,\n              key: this.keyIndex\n            }\n          };\n        } else {\n          tokenizedString += match;\n        } // Reduce the string being matched against,\n        // otherwise we end up in an infinite loop!\n\n\n        if (matcher.greedy) {\n          matchedString = tokenizedString + matchedString.slice(index + length);\n          tokenizedString = '';\n        } else {\n          // eslint-disable-next-line unicorn/explicit-length-check\n          matchedString = matchedString.slice(index + (length || match.length));\n        }\n      } // Update the matched string with the tokenized string,\n      // so that the next matcher can apply to it.\n\n\n      if (!matcher.greedy) {\n        matchedString = tokenizedString + matchedString;\n      }\n    });\n\n    if (elementIndex === 0) {\n      return string;\n    }\n\n    return this.replaceTokens(matchedString, elements);\n  }\n  /**\n   * Determine whether the child can be rendered within the parent.\n   */\n\n\n  canRenderChild(parentConfig, childConfig) {\n    if (!parentConfig.tagName || !childConfig.tagName) {\n      return false;\n    } // No children\n\n\n    if (parentConfig.void) {\n      return false;\n    } // Valid children\n\n\n    if (parentConfig.children.length > 0) {\n      return parentConfig.children.includes(childConfig.tagName);\n    }\n\n    if (parentConfig.invalid.length > 0 && parentConfig.invalid.includes(childConfig.tagName)) {\n      return false;\n    } // Valid parent\n\n\n    if (childConfig.parent.length > 0) {\n      return childConfig.parent.includes(parentConfig.tagName);\n    } // Self nesting\n\n\n    if (!parentConfig.self && parentConfig.tagName === childConfig.tagName) {\n      return false;\n    } // Content category type\n\n\n    return Boolean(parentConfig && parentConfig.content & childConfig.type);\n  }\n  /**\n   * Convert line breaks in a string to HTML `<br/>` tags.\n   * If the string contains HTML, we should not convert anything,\n   * as line breaks should be handled by `<br/>`s in the markup itself.\n   */\n\n\n  convertLineBreaks(markup) {\n    const {\n      noHtml,\n      disableLineBreaks\n    } = this.props;\n\n    if (noHtml || disableLineBreaks || markup.match(/<((?:\\/[ a-z]+)|(?:[ a-z]+\\/))>/gi)) {\n      return markup;\n    } // Replace carriage returns\n\n\n    let nextMarkup = markup.replace(/\\r\\n/g, '\\n'); // Replace long line feeds\n\n    nextMarkup = nextMarkup.replace(/\\n{3,}/g, '\\n\\n\\n'); // Replace line feeds with `<br/>`s\n\n    nextMarkup = nextMarkup.replace(/\\n/g, '<br/>');\n    return nextMarkup;\n  }\n  /**\n   * Create a detached HTML document that allows for easy HTML\n   * parsing while not triggering scripts or loading external\n   * resources.\n   */\n\n\n  createContainer(markup) {\n    var _this$props$container;\n\n    const factory = typeof global !== 'undefined' && global.INTERWEAVE_SSR_POLYFILL || createDocument;\n    const doc = factory();\n\n    if (!doc) {\n      return undefined;\n    }\n\n    const tag = (_this$props$container = this.props.containerTagName) !== null && _this$props$container !== void 0 ? _this$props$container : 'body';\n    const el = tag === 'body' || tag === 'fragment' ? doc.body : doc.createElement(tag);\n\n    if (markup.match(INVALID_ROOTS)) {\n      if (true) {\n        throw new Error('HTML documents as Interweave content are not supported.');\n      }\n    } else {\n      el.innerHTML = this.convertLineBreaks(this.props.escapeHtml ? escape_html__WEBPACK_IMPORTED_MODULE_2___default()(markup) : markup);\n    }\n\n    return el;\n  }\n  /**\n   * Convert an elements attribute map to an object map.\n   * Returns null if no attributes are defined.\n   */\n\n\n  extractAttributes(node) {\n    const {\n      allowAttributes\n    } = this.props;\n    const attributes = {};\n    let count = 0;\n\n    if (node.nodeType !== ELEMENT_NODE || !node.attributes) {\n      return null;\n    } // @ts-expect-error Cant type iterator\n\n\n    [...node.attributes].forEach(attr => {\n      const {\n        name,\n        value\n      } = attr;\n      const newName = name.toLowerCase();\n      const filter = _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.a[newName] || _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.a[name]; // Verify the node is safe from attacks\n\n      if (!this.isSafe(node)) {\n        return;\n      } // Do not allow denied attributes, excluding ARIA attributes\n      // Do not allow events or XSS injections\n\n\n      if (!newName.match(ALLOWED_ATTRS) && (!allowAttributes && (!filter || filter === _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.b) || newName.startsWith('on') || value.replace(/(\\s|\\0|&#x0([9AD]);)/, '').match(/(javascript|vbscript|livescript|xss):/i))) {\n        return;\n      } // Apply attribute filters\n\n\n      let newValue = newName === 'style' ? this.extractStyleAttribute(node) : value; // Cast to boolean\n\n      if (filter === _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.d) {\n        newValue = true; // Cast to number\n      } else if (filter === _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.e) {\n        newValue = Number.parseFloat(String(newValue)); // Cast to string\n      } else if (filter !== _bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.f) {\n        newValue = String(newValue);\n      }\n\n      attributes[_bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.c[newName] || newName] = this.applyAttributeFilters(newName, newValue);\n      count += 1;\n    });\n\n    if (count === 0) {\n      return null;\n    }\n\n    return attributes;\n  }\n  /**\n   * Extract the style attribute as an object and remove values that allow for attack vectors.\n   */\n\n\n  extractStyleAttribute(node) {\n    const styles = {}; // eslint-disable-next-line unicorn/prefer-spread\n\n    Array.from(node.style).forEach(key => {\n      const value = node.style[key];\n\n      if (typeof value === 'string' || typeof value === 'number') {\n        styles[key.replace(/-([a-z])/g, (match, letter) => String(letter).toUpperCase())] = value;\n      }\n    });\n    return styles;\n  }\n  /**\n   * Return configuration for a specific tag.\n   */\n\n\n  getTagConfig(tagName) {\n    const common = {\n      children: [],\n      content: 0,\n      invalid: [],\n      parent: [],\n      self: true,\n      tagName: '',\n      type: 0,\n      void: false\n    }; // Only spread when a tag config exists,\n    // otherwise we use the empty `tagName`\n    // for parent config inheritance.\n\n    if (_bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.T[tagName]) {\n      return { ...common,\n        ..._bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.T[tagName],\n        tagName\n      };\n    }\n\n    return common;\n  }\n  /**\n   * Verify that a node is safe from XSS and injection attacks.\n   */\n\n\n  isSafe(node) {\n    // URLs should only support HTTP, email and phone numbers\n    if (typeof HTMLAnchorElement !== 'undefined' && node instanceof HTMLAnchorElement) {\n      const href = node.getAttribute('href'); // Fragment protocols start with about:\n      // So let's just allow them\n\n      if (href !== null && href !== void 0 && href.startsWith('#')) {\n        return true;\n      }\n\n      const protocol = node.protocol.toLowerCase();\n      return protocol === ':' || protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:' || protocol === 'tel:';\n    }\n\n    return true;\n  }\n  /**\n   * Verify that an HTML tag is allowed to render.\n   */\n\n\n  isTagAllowed(tagName) {\n    if (this.banned.has(tagName) || this.blocked.has(tagName)) {\n      return false;\n    } // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n\n\n    return this.props.allowElements || this.allowed.has(tagName);\n  }\n  /**\n   * Parse the markup by injecting it into a detached document,\n   * while looping over all child nodes and generating an\n   * array to interpolate into JSX.\n   */\n\n\n  parse() {\n    if (!this.container) {\n      return [];\n    }\n\n    return this.parseNode(this.container, this.getTagConfig(this.container.nodeName.toLowerCase()));\n  }\n  /**\n   * Loop over the nodes children and generate a\n   * list of text nodes and React elements.\n   */\n\n\n  parseNode(parentNode, parentConfig) {\n    const {\n      noHtml,\n      noHtmlExceptMatchers,\n      allowElements,\n      transform,\n      transformOnlyAllowList\n    } = this.props;\n    let content = [];\n    let mergedText = ''; // @ts-expect-error Cant type iterator\n\n    [...parentNode.childNodes].forEach(node => {\n      // Create React elements from HTML elements\n      if (node.nodeType === ELEMENT_NODE) {\n        const tagName = node.nodeName.toLowerCase();\n        const config = this.getTagConfig(tagName); // Persist any previous text\n\n        if (mergedText) {\n          content.push(mergedText);\n          mergedText = '';\n        } // Apply node filters first\n\n\n        const nextNode = this.applyNodeFilters(tagName, node);\n\n        if (!nextNode) {\n          return;\n        } // Apply transformation second\n\n\n        let children;\n\n        if (transform && !(transformOnlyAllowList && !this.isTagAllowed(tagName))) {\n          this.keyIndex += 1;\n          const key = this.keyIndex; // Must occur after key is set\n\n          children = this.parseNode(nextNode, config);\n          const transformed = transform(nextNode, children, config);\n\n          if (transformed === null) {\n            return;\n          }\n\n          if (typeof transformed !== 'undefined') {\n            content.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().cloneElement(transformed, {\n              key\n            }));\n            return;\n          } // Reset as we're not using the transformation\n\n\n          this.keyIndex = key - 1;\n        } // Never allow these tags (except via a transformer)\n\n\n        if (this.banned.has(tagName)) {\n          return;\n        } // Only render when the following criteria is met:\n        //  - HTML has not been disabled\n        //  - Tag is allowed\n        //  - Child is valid within the parent\n\n\n        if (!(noHtml || noHtmlExceptMatchers && tagName !== 'br') && this.isTagAllowed(tagName) && (allowElements || this.canRenderChild(parentConfig, config))) {\n          var _children;\n\n          this.keyIndex += 1; // Build the props as it makes it easier to test\n\n          const attributes = this.extractAttributes(nextNode);\n          const elementProps = {\n            tagName\n          };\n\n          if (attributes) {\n            elementProps.attributes = attributes;\n          }\n\n          if (config.void) {\n            elementProps.selfClose = config.void;\n          }\n\n          content.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.E, { ...elementProps,\n            key: this.keyIndex\n          }, (_children = children) !== null && _children !== void 0 ? _children : this.parseNode(nextNode, config))); // Render the children of the current element only.\n          // Important: If the current element is not allowed,\n          // use the parent element for the next scope.\n        } else {\n          content = [...content, ...this.parseNode(nextNode, config.tagName ? config : parentConfig)];\n        } // Apply matchers if a text node\n\n      } else if (node.nodeType === TEXT_NODE) {\n        const text = noHtml && !noHtmlExceptMatchers ? node.textContent : // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        this.applyMatchers(node.textContent || '', parentConfig);\n\n        if (Array.isArray(text)) {\n          content = [...content, ...text];\n        } else {\n          mergedText += text;\n        }\n      }\n    });\n\n    if (mergedText) {\n      content.push(mergedText);\n    }\n\n    return content;\n  }\n  /**\n   * Deconstruct the string into an array, by replacing custom tokens with React elements,\n   * so that React can render it correctly.\n   */\n\n\n  replaceTokens(tokenizedString, elements) {\n    if (!tokenizedString.includes('{{{')) {\n      return tokenizedString;\n    }\n\n    const nodes = [];\n    let text = tokenizedString;\n    let open = null; // Find an open token tag\n\n    while (open = text.match(OPEN_TOKEN)) {\n      const [match, tokenName] = open;\n      const startIndex = open.index;\n      const isVoid = match.includes('/');\n\n      if ( true && !elements[tokenName]) {\n        throw new Error(`Token \"${tokenName}\" found but no matching element to replace with.`);\n      } // Extract the previous non-token text\n\n\n      if (startIndex > 0) {\n        nodes.push(text.slice(0, startIndex)); // Reduce text so that the closing tag will be found after the opening\n\n        text = text.slice(startIndex);\n      }\n\n      const {\n        children,\n        matcher,\n        props: elementProps\n      } = elements[tokenName];\n      let endIndex; // Use tag as-is if void\n\n      if (isVoid) {\n        endIndex = match.length;\n        nodes.push(matcher.createElement(children, elementProps)); // Find the closing tag if not void\n      } else {\n        const close = text.match(new RegExp(`{{{/${tokenName}}}}`));\n\n        if ( true && !close) {\n          throw new Error(`Closing token missing for interpolated element \"${tokenName}\".`);\n        }\n\n        endIndex = close.index + close[0].length;\n        nodes.push(matcher.createElement(this.replaceTokens(text.slice(match.length, close.index), elements), elementProps));\n      } // Reduce text for the next interation\n\n\n      text = text.slice(endIndex);\n    } // Extra the remaining text\n\n\n    if (text.length > 0) {\n      nodes.push(text);\n    } // Reduce to a string if possible\n\n\n    if (nodes.length === 0) {\n      return '';\n    }\n\n    if (nodes.length === 1 && typeof nodes[0] === 'string') {\n      return nodes[0];\n    }\n\n    return nodes;\n  }\n\n}\n/* eslint-disable react/jsx-fragments */\n\n\nfunction Markup(props) {\n  var _ref;\n\n  const {\n    attributes,\n    className,\n    containerTagName,\n    content,\n    emptyContent,\n    parsedContent,\n    tagName,\n    noWrap: baseNoWrap\n  } = props;\n  const tag = (_ref = containerTagName !== null && containerTagName !== void 0 ? containerTagName : tagName) !== null && _ref !== void 0 ? _ref : 'span';\n  const noWrap = tag === 'fragment' ? true : baseNoWrap;\n  let mainContent;\n\n  if (parsedContent) {\n    mainContent = parsedContent;\n  } else {\n    const markup = new Parser(content !== null && content !== void 0 ? content : '', props).parse();\n\n    if (markup.length > 0) {\n      mainContent = markup;\n    }\n  }\n\n  if (!mainContent) {\n    mainContent = emptyContent;\n  }\n\n  if (noWrap) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, mainContent);\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_bundle_7aab7250_js__WEBPACK_IMPORTED_MODULE_0__.E, {\n    attributes: attributes,\n    className: className,\n    tagName: tag\n  }, mainContent);\n}\n/* eslint-disable promise/prefer-await-to-callbacks */\n\n\nfunction Interweave(props) {\n  const {\n    attributes,\n    className,\n    content = '',\n    disableFilters = false,\n    disableMatchers = false,\n    emptyContent = null,\n    filters = [],\n    matchers = [],\n    onAfterParse = null,\n    onBeforeParse = null,\n    tagName = 'span',\n    noWrap = false,\n    ...parserProps\n  } = props;\n  const allMatchers = disableMatchers ? [] : matchers;\n  const allFilters = disableFilters ? [] : filters;\n  const beforeCallbacks = onBeforeParse ? [onBeforeParse] : [];\n  const afterCallbacks = onAfterParse ? [onAfterParse] : []; // Inherit callbacks from matchers\n\n  allMatchers.forEach(matcher => {\n    if (matcher.onBeforeParse) {\n      beforeCallbacks.push(matcher.onBeforeParse.bind(matcher));\n    }\n\n    if (matcher.onAfterParse) {\n      afterCallbacks.push(matcher.onAfterParse.bind(matcher));\n    }\n  }); // Trigger before callbacks\n\n  const markup = beforeCallbacks.reduce((string, callback) => {\n    const nextString = callback(string, props);\n\n    if ( true && typeof nextString !== 'string') {\n      throw new TypeError('Interweave `onBeforeParse` must return a valid HTML string.');\n    }\n\n    return nextString;\n  }, content !== null && content !== void 0 ? content : ''); // Parse the markup\n\n  const parser = new Parser(markup, parserProps, allMatchers, allFilters); // Trigger after callbacks\n\n  const nodes = afterCallbacks.reduce((parserNodes, callback) => {\n    const nextNodes = callback(parserNodes, props);\n\n    if ( true && !Array.isArray(nextNodes)) {\n      throw new TypeError('Interweave `onAfterParse` must return an array of strings and React elements.');\n    }\n\n    return nextNodes;\n  }, parser.parse());\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Markup, {\n    attributes: attributes,\n    className: className // eslint-disable-next-line react/destructuring-assignment\n    ,\n    containerTagName: props.containerTagName,\n    emptyContent: emptyContent,\n    noWrap: noWrap,\n    parsedContent: nodes.length === 0 ? undefined : nodes,\n    tagName: tagName\n  });\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/interweave/esm/index.js\n");

/***/ })

};
;